plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.74'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id



repositories {
    mavenLocal()


    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url = 'https://maven.minecraftforge.net/' }


    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.shedaniel.me/' }

    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.wispforest.io/releases" }



}

base {
    archivesName = mod_id
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)


neoForge {
    version = project.neo_version
    validateAccessTransformers = true

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers =  rootProject.files('src/main/resources/META-INF/mtaaccesstransformer.cfg')

    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        clientData {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }


}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    implementation "com.github.glitchfiend:TerraBlender-neoforge:${minecraft_version}-${terrablenderVersion}"

    implementation "io.wispforest:owo-lib-neoforge:${owolibVersion}"
    implementation("io.wispforest:accessories-neoforge:${accessoriesVersion}")


//    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
//    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"


}


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_credits             : mod_credits,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
            terrablenderVersion     : terrablenderVersion,
            emi_version             : emi_version,
            accessoriesVersion      : accessoriesVersion,
            owolibVersion      : owolibVersion,
            terrablenderVersionRange: terrablenderVersionRange,
            accessoriesVersionRange: accessoriesVersionRange,
            owolibVersionRange: owolibVersionRange

    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
    from "src/main/templates"
    into "build/generated/sources/modMetadata"

}


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"

        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
