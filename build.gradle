plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/mtaaccesstransformer.cfg')
    }
}

repositories {
    mavenLocal()


    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url = 'https://maven.minecraftforge.net/' }


    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.shedaniel.me/' }

    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.wispforest.io/releases" }



}

base {
    archivesName = mod_id
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)



runs {

    configureEach {

        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {

        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }


    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    clientData {
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "com.github.glitchfiend:TerraBlender-neoforge:${minecraft_version}-${terrablenderVersion}"

    implementation "io.wispforest:owo-lib-neoforge:${owolibVersion}"
    implementation("io.wispforest:accessories-neoforge:${accessoriesVersion}")


//    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
//    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"


}


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_credits             : mod_credits,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
            terrablenderVersion     : terrablenderVersion,
            emi_version             : emi_version,
            accessoriesVersion      : accessoriesVersion,
            owolibVersion      : owolibVersion,
            terrablenderVersionRange: terrablenderVersionRange,
            accessoriesVersionRange: accessoriesVersionRange,
            owolibVersionRange: owolibVersionRange

    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"

        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
